package GUI;

import Model.AskTheAudience;
import Model.CallAFriend;
import Model.FiftyFifty;
import Model.Questions;
import Model.Lifeline;
import Model.Player;
import Model.Prize;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class GameFrame extends javax.swing.JFrame {

    private Questions question;
    private Lifeline lifeline;
    private static Player player;
    private Prize prize;
    private Database db;
    private Timer timer;
    private int count;
    private int qNum, money;
    private boolean check;
    private boolean l1available, l2available, l3available;
    private String userAns;

    private boolean confirmed;

    /**
     * Creates new form GameFrame
     */
    public GameFrame(Player player) {
        this.player = player;

        this.getContentPane().setBackground(Color.BLACK);
        initComponents();

        question = new Questions();
        prize = new Prize();

        this.db = new Database();
        this.db.dbsetup();

        int score = this.db.checkName(this.player.getUserName());
        this.player.setWinning(score);

        qNum = 1;
        money = 0;
        count = 60;
        check = true;
        confirmed = true;
        l1available = true;
        l2available = true;
        l3available = true;

        question.addQuestion();

        if ((check == true) && (qNum <= 15)) {
            updateQuestion();
        }

        this.setLocationRelativeTo(null);
    }

    public void generateQuestion(Questions q) {
        this.qNumLabel.setText(Integer.toString(qNum));
        this.qLabel.setText(q.getQuestion());
        this.ansALabel.setText("A. " + q.getAnsA());
        this.ansBLabel.setText("B. " + q.getAnsB());
        this.ansCLabel.setText("C. " + q.getAnsC());
        this.ansDLabel.setText("D. " + q.getAnsD());
    }

    public void updateQuestion() {
        if (confirmed == true) {
            question.separateQuestion(qNum);
            generateQuestion(question);
            countDown();
        } else {
            generateQuestion(question);
            countDown();
        }
    }

    public void checkAnswer(String userAns) {
        if (count == 0) {
            check = false;
            money = prize.checkPrize(qNum);
            player.setWinning(money);
            qNum = 1;
        } else {
            int response = JOptionPane.showConfirmDialog(null, "Is that your final answer?", "Confirm answer",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                confirmed = true;
                count = 60;
                if (userAns.equals(question.getCorrectAns())) {
                    if (qNum == 15) {
                        prize.setPrize(qNum);
                        money = prize.getPrize();
                        player.setWinning(money);
                        check = false;
                    } else {
                        prize.setPrize(qNum);
                        money = prize.getPrize();
                        qNum++;
                    }
                } else {
                    check = false;
                    money = prize.checkPrize(qNum);
                    player.setWinning(money);
                    qNum = 1;
                }
            } else {
                confirmed = false;
            }
        }

    }

    public void showOutput(String answer) {
        timer.stop();
        checkAnswer(answer);

        if (check == true) {
            this.updatePrize(qNum);
            this.updateQuestion();
        } else {
            this.db.quitGame(this.player.getWinning(), this.player.getUserName());
            this.dispose();
            new RestartFrame(player).setVisible(true);
        }

    }

    public void updatePrize(int qNum) {
        if (qNum > 1) {
            String prize = "src/Image/" + Integer.toString(qNum) + ".png";
            this.prizeLabel.setIcon(new ImageIcon(prize));
        }
    }

    public void countDown() {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timerLabel.setText(String.valueOf(count));
                count--;

                if (count == 0) {
                    userAns = "";
                    showOutput(userAns);
                }
            }
        });

        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qLabel = new javax.swing.JLabel();
        L1Label = new javax.swing.JLabel();
        L2Label = new javax.swing.JLabel();
        L3Label = new javax.swing.JLabel();
        logoLabel = new javax.swing.JLabel();
        ansALabel = new javax.swing.JLabel();
        ansBLabel = new javax.swing.JLabel();
        ansCLabel = new javax.swing.JLabel();
        ansDLabel = new javax.swing.JLabel();
        qNumLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        prizeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Who Wants to Be a Milionaire");
        setPreferredSize(new java.awt.Dimension(775, 650));

        qLabel.setForeground(new java.awt.Color(255, 255, 255));
        qLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/question.png"))); // NOI18N
        qLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        L1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/5050.png"))); // NOI18N
        L1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L1LabelMouseClicked(evt);
            }
        });

        L2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/AskTheAudience.png"))); // NOI18N
        L2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L2LabelMouseClicked(evt);
            }
        });

        L3Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/PhoneAFriend.png"))); // NOI18N
        L3Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L3LabelMouseClicked(evt);
            }
        });

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Logo.png"))); // NOI18N

        ansALabel.setForeground(new java.awt.Color(255, 255, 255));
        ansALabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Blue.png"))); // NOI18N
        ansALabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ansALabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ansALabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ansALabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ansALabelMouseExited(evt);
            }
        });

        ansBLabel.setForeground(new java.awt.Color(255, 255, 255));
        ansBLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Blue.png"))); // NOI18N
        ansBLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ansBLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ansBLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ansBLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ansBLabelMouseExited(evt);
            }
        });

        ansCLabel.setForeground(new java.awt.Color(255, 255, 255));
        ansCLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Blue.png"))); // NOI18N
        ansCLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ansCLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ansCLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ansCLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ansCLabelMouseExited(evt);
            }
        });

        ansDLabel.setForeground(new java.awt.Color(255, 255, 255));
        ansDLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Blue.png"))); // NOI18N
        ansDLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ansDLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ansDLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ansDLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ansDLabelMouseExited(evt);
            }
        });

        qNumLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        qNumLabel.setForeground(new java.awt.Color(255, 255, 255));
        qNumLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        timerLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        timerLabel.setForeground(new java.awt.Color(255, 255, 255));
        timerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clock.jpg"))); // NOI18N
        timerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        prizeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/1.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(L1Label)
                .addGap(18, 18, 18)
                .addComponent(L2Label)
                .addGap(18, 18, 18)
                .addComponent(L3Label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(timerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoLabel)
                .addGap(43, 43, 43)
                .addComponent(prizeLabel)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(qLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ansCLabel)
                    .addComponent(ansALabel))
                .addGap(25, 25, 25)
                .addComponent(qNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ansBLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ansDLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L2Label)
                    .addComponent(L1Label)
                    .addComponent(L3Label))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(timerLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(prizeLabel)
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(logoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(qLabel)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ansALabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ansBLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ansDLabel)
                                    .addComponent(ansCLabel)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(qNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))
                        .addGap(47, 47, 47))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void L1LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L1LabelMouseClicked
        if (l1available) {
            lifeline = new FiftyFifty("50/50");
            lifeline.generateLifeline(question);
            generateQuestion(question);
        }
        this.L1Label.setEnabled(false);
        this.l1available = false;
    }//GEN-LAST:event_L1LabelMouseClicked

    private void L2LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L2LabelMouseClicked
        if (l2available) {
            lifeline = new AskTheAudience("Ask the Audience");
            lifeline.generateLifeline(question);
            new AskTheAudienceFrame(lifeline).setVisible(true);
        }

        this.L2Label.setEnabled(false);
        this.l2available = false;
    }//GEN-LAST:event_L2LabelMouseClicked

    private void L3LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L3LabelMouseClicked
        if (l3available) {
            lifeline = new CallAFriend("Call a Friend");
            lifeline.generateLifeline(question);
            new CallAFriendFrame(lifeline).setVisible(true);
        }

        this.L3Label.setEnabled(false);
        this.l3available = false;
    }//GEN-LAST:event_L3LabelMouseClicked

    private void ansALabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansALabelMouseClicked
        userAns = question.getAnsA();
        showOutput(userAns);
    }//GEN-LAST:event_ansALabelMouseClicked

    private void ansBLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansBLabelMouseClicked
        userAns = question.getAnsB();
        showOutput(userAns);
    }//GEN-LAST:event_ansBLabelMouseClicked

    private void ansCLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansCLabelMouseClicked
        userAns = question.getAnsC();
        showOutput(userAns);
    }//GEN-LAST:event_ansCLabelMouseClicked

    private void ansDLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansDLabelMouseClicked
        userAns = question.getAnsD();
        showOutput(userAns);
    }//GEN-LAST:event_ansDLabelMouseClicked

    private void ansALabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansALabelMouseEntered
        this.ansALabel.setIcon(new ImageIcon("src/Image/Orange.png"));
    }//GEN-LAST:event_ansALabelMouseEntered

    private void ansBLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansBLabelMouseEntered
        this.ansBLabel.setIcon(new ImageIcon("src/Image/Orange.png"));
    }//GEN-LAST:event_ansBLabelMouseEntered

    private void ansCLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansCLabelMouseEntered
        this.ansCLabel.setIcon(new ImageIcon("src/Image/Orange.png"));
    }//GEN-LAST:event_ansCLabelMouseEntered

    private void ansDLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansDLabelMouseEntered
        this.ansDLabel.setIcon(new ImageIcon("src/Image/Orange.png"));
    }//GEN-LAST:event_ansDLabelMouseEntered

    private void ansALabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansALabelMouseExited
        this.ansALabel.setIcon(new ImageIcon("src/Image/Blue.png"));
    }//GEN-LAST:event_ansALabelMouseExited

    private void ansBLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansBLabelMouseExited
        this.ansBLabel.setIcon(new ImageIcon("src/Image/Blue.png"));
    }//GEN-LAST:event_ansBLabelMouseExited

    private void ansCLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansCLabelMouseExited
        this.ansCLabel.setIcon(new ImageIcon("src/Image/Blue.png"));
    }//GEN-LAST:event_ansCLabelMouseExited

    private void ansDLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ansDLabelMouseExited
        this.ansDLabel.setIcon(new ImageIcon("src/Image/Blue.png"));
    }//GEN-LAST:event_ansDLabelMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame(player).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L1Label;
    private javax.swing.JLabel L2Label;
    private javax.swing.JLabel L3Label;
    private javax.swing.JLabel ansALabel;
    private javax.swing.JLabel ansBLabel;
    private javax.swing.JLabel ansCLabel;
    private javax.swing.JLabel ansDLabel;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JLabel prizeLabel;
    private javax.swing.JLabel qLabel;
    private javax.swing.JLabel qNumLabel;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
